#自定义实现数组的几种声明式方法
1. map()
2. reduce()
3. filter()
4. find()
5. findIndex()
6. every()
7. some()

`let arr = [1, 3, 4, 7, 9, 5, 8]`

###1. map()
```
Array.prototype.map = function(callback) {
    let arr = []
    for (let index = 0; index < this.length; index++) {
        arr.push(callback(this[index], index))
    }
    return arr
}



/* 奇数索引的值加20，偶数索引的值加10 */
let arr1 = arr.map((item, index) => {
    if (index % 2 === 1) {
        return item += 20
    } else {
        return item += 10
    }
})
```
---

###2. reduce()

```
Array.prototype.reduce = function(callback, initValue) {
    let total = initValue
    for (let index = 0; index < this.length; index++) {
        total = callback(total, this[index], index)
    }
    return total
}

let arr2 = arr.reduce((accumulator, currentValue, currentIndex) => {
    if (currentValue % 2 === 1 && currentIndex % 2 === 1) {
        accumulator += currentValue
    }
    return accumulator
}, 0)

```

---

###3. filter()

```
Array.prototype.filter = function(callback) {
    let arr = []
    for (let index = 0; index < this.length; index++) {
        if (callback(this[index], index)) {
            arr.push(this[index])
        }
    }
    return arr
}

let arr3 = arr.filter((item, index) => item % 2 === 1 && index % 2 === 1)
```

---

###4. find()

```
Array.prototype.find = function(callback) {
    for (let index = 0; index < this.length; index++) {
        if (callback(this[index], index)) {
            return this[index]
        }
    }
}

let arr4 = arr.find((item, index) => item % 2 === 1 && index % 2 === 1)

```

---

###5. findIndex()

```
Array.prototype.findIndex = function(callback) {
    for (let index = 0; index < this.length; index++) {
        if (callback(this[index], index)) {
            return index
        }
    }
}

let arr5 = arr.findIndex((item, index) => item % 2 === 1 && index % 2 === 1)
```

---

###6. every()

```
Array.prototype.every = function(callback) {
    for (let index = 0; index < this.length; index++) {
        if (!callback(this[index], index)) {
            return false
        }
    }
    return true
}

let arr6 = arr.every((item, index) => item % 2 === 1 && index % 2 === 1)
```

---

###7. some()

```
Array.prototype.some = function(callback) {
    for (let index = 0; index < this.length; index++) {
        if (callback(this[index], index)) {
            return true
        }
    }
    return false
}

let arr7 = arr.some((item, index) => item % 2 === 1 && index % 2 === 1)
```

